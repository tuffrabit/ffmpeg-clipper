package templ

import (
    "fmt"
    "ffmpeg-clipper/config"
)

templ GetProfileAndList(selectedProfile string, profiles []string, profile config.ClipProfileJson) {
    @GetProfileNames(selectedProfile, profiles)
    <span hx-swap-oob="innerHTML:#profile-form">@GetProfile(profile)</span>
}

templ GetProfileNames(selectedProfile string, profiles []string) {
	for _, p := range profiles {
        if p == selectedProfile {
            <option value={ p } selected>{ p }</option>
        } else {
            <option value={ p }>{ p }</option>
        }
    }
}

templ GetProfile(profile config.ClipProfileJson) {
    <div>
        <label for="scale-factor">Scale Down Factor</label>
        <input id="scale-factor" name="scale-factor" type="number" step="0.00001" min="0.0" value={ fmt.Sprintf("%f", profile.ScaleFactor) } onchange="calculateScale();" />
        <script>calculateScale();</script>
    </div>
    <div>
        <label for="encoder">Encoder</label>
        <select id="encoder" name="encoder" hx-trigger="change" hx-get="/getencodersettings.html" hx-target="#encoder-settings" hx-swap="innerHTML">
            for v, l := range config.GetEncoderTypes() {
                if v == profile.Encoder {
                    <option value={ string(v) } selected>{ l }</option>
                } else {
                    <option value={ string(v) }>{ l }</option>
                }
            }
        </select> 
    </div>
    <div id="encoder-settings">
        @GetEncoderSettings(profile.Encoder, profile.EncoderSettings)
    </div>
    <div>
        <label for="saturation" title="Default 1.0">Saturation (Default 1.0)</label>
        <input id="saturation" name="saturation" type="number" step="0.1" min="0.0" max="3.0" value={ fmt.Sprintf("%f", profile.Saturation) } />
    </div>
    <div>
        <label for="contrast" title="Default 1.0">Contrast (Default 1.0)</label>
        <input id="contrast" name="contrast" type="number" step="0.1" min="-1000.0" max="1000.0"  value={ fmt.Sprintf("%f", profile.Contrast) } />
    </div>
    <div>
        <label for="brightness" title="Default 0.0">Brightness (Default 0.0)</label>
        <input id="brightness" name="brightness" type="number" step="0.01" min="-1.0" max="1.0" value={ fmt.Sprintf("%f", profile.Brightness) } />
    </div>
    <div>
        <label for="gamma" title="Default 1.0">Gamma (Default 1.0)</label>
        <input id="gamma" name="gamma" type="number" step="0.1" min="0.1" max="10.0" value={ fmt.Sprintf("%f", profile.Gamma) } />
    </div>
    <div>
        <label for="exposure" title="Default 0.0">Exposure (Default 0.0)</label>
        <input id="exposure" name="exposure" type="number" step="0.01" min="-3.0" max="3.0" value={ fmt.Sprintf("%f", profile.Exposure) } />
    </div>
    <div>
        <label for="black-level" title="Default 0.0">Black Level (Default 0.0)</label>
        <input id="black-level" name="black-level" type="number" step="0.01" min="-1.0" max="1.0" value={ fmt.Sprintf("%f", profile.BlackLevel) } />
    </div>
    <div>
        if profile.PlayAfter {
            <input id="play-after" name="play-after" type="checkbox" role="switch" checked />
        } else {
            <input id="play-after" name="play-after" type="checkbox" role="switch" />
        }
        <label for="play-after">Play clip when done</label>
    </div>
}